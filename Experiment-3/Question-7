56. Merge Intervals
Solved
Medium
Topics
Companies
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104

Code:

class Solution {
    public int[][] merge(int[][] intervals) {
         if(intervals.length == 0) return new int[0][];

        //sort intervals based on start time
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        List<int[]> mergedIntervals = new ArrayList<>();

        //initialize with first interval
        int start = intervals[0][0];
        int end = intervals[0][1];

        //traverse the merged intervals
        for(int i = 0; i < intervals.length; i++){
            int currentStart = intervals[i][0];
            int currentEnd = intervals[i][1];

            if(currentStart <= end){
                //merge intervals by  updating the end
                end = Math.max(end, currentEnd);
            } else {
                // else add previous merged intervals and update start & end
                mergedIntervals.add(new int[]{start, end});
                start = currentStart;
                end = currentEnd;
            }
        }

        //add last interval
        mergedIntervals.add(new int[]{start, end});

        return mergedIntervals.toArray(new int[mergedIntervals.size()][]);
    }
}
